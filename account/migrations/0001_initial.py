# Generated by Django 3.2.4 on 2021-06-11 13:20

import common.utils
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(max_length=100, blank=True)),
                ('last_name', models.CharField(max_length=100, blank=True)),
                ('paid_status', models.BooleanField(default=False)),
                ('paid_by', models.DateTimeField(blank=True, null=True)),
                ('paid_plan', models.CharField(blank=True, choices=[('Premium', 'Premium')], max_length=50, null=True)),
                ('verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RestorePasswordCheck',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('restore_code', models.CharField(max_length=32)),
                ('created_time', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('used', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='FavoriteProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prop_id', models.CharField(max_length=20)),
                ('added_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('photo1', models.CharField(max_length=255)),
                ('address', models.CharField(max_length=255)),
                ('price', models.IntegerField(null=True, blank=True)),
                ('beds', models.FloatField(null=True, blank=True)),
                ('baths', models.FloatField(null=True, blank=True)),
                ('building_size', models.IntegerField(null=True, blank=True)),
                ('cash_on_cash', models.FloatField(null=True, blank=True)),
                ('cap_rate', models.FloatField(null=True, blank=True)),
                ('total_return', models.FloatField(null=True, blank=True)),
                ('predicted_rent', models.IntegerField(null=True, blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EmailSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alerts_city', models.BooleanField(default=True)),
                ('alerts_property', models.BooleanField(default=True)),
                ('comm_promotions', models.BooleanField(default=True)),
                ('comm_monthly_newsletters', models.BooleanField(default=True)),
                ('comm_tips_blogs', models.BooleanField(default=True)),
                ('comm_product_updates', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'email settingses',
            },
        ),
        migrations.CreateModel(
            name='EmailAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('code', models.CharField(blank=True, default=common.utils.generate_random_hex_str, max_length=32, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'email address',
                'verbose_name_plural': 'email addresses',
            },
        ),
        migrations.AddIndex(
            model_name='favoriteproperty',
            index=models.Index(fields=['prop_id', 'user'], name='account_fav_prop_id_ade9ff_idx'),
        ),
        migrations.AddIndex(
            model_name='favoriteproperty',
            index=models.Index(fields=['user'], name='account_fav_user_id_b67efb_idx'),
        ),
    ]
